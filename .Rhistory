receiver_id = receiver_number,
receiver = receiver,
individual_id = individual_id,
transmitter_id = transmitter_id,
receiver_long = long_receiver,
receiver_lat = lat_receiver,
receiver_depth = receiver_depth)
dat_acoustics <- dat_acoustics %>% dplyr::select(timestamp,
individual_id,
transmitter_id,
receiver_id,
receiver,
receiver_long,
receiver_lat,
receiver_depth)
#### Select rows
unique(dat_acoustics$transmitter_id)
# immature females with long acoustic and archival timeseries: 540, 560
# mature females with long timeseries: 555, 543
# immature male: 563
transmitter_ids <- c("A69-1303-540", "A69-1303-560", "A69-1303-555")
dat_acoustics <- dat_acoustics[dat_acoustics$transmitter_id %in% transmitter_ids, ]
#### Arrange
dat_acoustics <- dat_acoustics %>% dplyr::arrange(individual_id, timestamp, receiver_id)
head(dat_acoustics)
#####################################
#####################################
#### dat_sentinel
#### Examine structure
unique(dat_moorings$sentinel_id)
#### Select columns
cols_sentinel <- c("timestamp",
"type",
"detector_id",
"detector",
"transmitter_id",
"transmitter",
"sentinel_id"
)
dat_sentinel <- sentinel[, cols_sentinel]
#### Rename columns
dat_sentinel <- dat_sentinel %>% dplyr::rename(timestamp = timestamp,
type = type,
sink_id = detector_id,
sink = detector,
source_id = transmitter_id,
source = transmitter,
sentinel_id = sentinel_id)
dat_sentinel <- dat_sentinel %>% dplyr::select(timestamp,
type,
sink_id,
sink,
source_id,
source,
sentinel_id)
#### Select rows
# avoid tags: 60599 and 61048 (unexplained gaps and latter was programmed differently)
sentinel_ids <- c(60595, 60596)
dat_sentinel <- dat_sentinel[which(dat_sentinel$sentinel_id %in% sentinel_ids), ]
# Select the first X % of rows for each tag to minimise space requirements
dat_sentinel <- dat_sentinel %>% dplyr::arrange(sentinel_id, timestamp)
dat_sentinel <- lapply(split(dat_sentinel, f = factor(dat_sentinel$sentinel_id)), function(d){
n <- nrow(d)
return(d[1:(n * 0.5), ])
}) %>% dplyr::bind_rows()
dat_sentinel$sentinel_id <- as.character(dat_sentinel$sentinel_id)
#### Arrange rows
dat_sentinel <- dat_sentinel %>% dplyr::arrange(source_id, timestamp, sink_id)
head(dat_sentinel)
tail(dat_sentinel)
#####################################
#####################################
#### dat_archival
#### Examine structure
str(archival)
#### Select columns
cols_archival <- c("date_time",
"individual",
"transmitter_id",
"dst_id",
"depth")
dat_archival <- archival[, cols_archival]
#### Rename and order cols
dat_archival <- dat_archival %>% dplyr::rename(timestamp = date_time,
individual_id = individual,
transmitter_id = transmitter_id,
archival_id = dst_id,
depth = depth)
dat_archival <- dat_archival %>% dplyr::select(timestamp,
individual_id,
transmitter_id,
archival_id,
depth)
#### Select rows
dat_archival <- dat_archival[!is.na(dat_archival$transmitter_id), ]
dat_archival <- dat_archival[dat_archival$transmitter_id %in% transmitter_ids, ]
# dat_archival is the largest file so, to reduce size, I'll select the first X observations
# ... for each individual
nrow(dat_archival)
dat_archival <- dat_archival %>% dplyr::arrange(individual_id, timestamp)
dat_archival <- lapply(split(dat_archival, f = dat_archival$individual_id), function(d) return(d[1:25000, ])) %>% dplyr::bind_rows()
nrow(dat_archival)
#### Arrange rows
dat_archival <- dat_archival %>% dplyr::arrange(individual_id, timestamp)
head(dat_archival)
#####################################
#####################################
#### Final adjustments
#### Filter moorings based on receivers in dat_acoustic and dat_sentinel
receiver_ids <- unique(c(dat_acoustics$receiver_id,
dat_sentinel$detector_id,
dat_sentinel$transmitter_id))
dat_moorings <- dat_moorings[dat_moorings$receiver_id %in% receiver_ids, ]
#### Filter dat_ids based on full list of receivers :
dat_ids <- dat_ids[dat_ids$receiver_id %in% receiver_ids, ]
#### Check structure for naming and variable type consistency
str(dat_ids)
str(dat_moorings)
str(dat_acoustics)
str(dat_sentinel)
str(dat_archival)
#####################################
#####################################
#### Save data sources
dir2save_dat <- "/Users/el72/Documents/PhD/Academic_PhD_Work/Data and Modelling/Scripts/3, Chapters/Geolocation/flapper/flapper/data-raw/"
saveRDS(dat_ids, "dat_ids.rds")
saveRDS(dat_moorings, paste0(dir2save_dat, "dat_moorings.rds"))
saveRDS(dat_acoustics, paste0(dir2save_dat, "dat_acoustics.rds"))
saveRDS(dat_sentinel, paste0(dir2save_dat, "dat_sentinel.rds"))
saveRDS(dat_archival, paste0(dir2save_dat, "dat_archival.rds"))
#### End of code.
#####################################
#####################################
dat_moorings
receiver_ids
#####################################
#####################################
#### flapper_set_up
#### This code:
# 1) Extracts and save copies of movement data for incorporation in the flapper R package
# Only a subset of movement data are retained to minimise package size.
#####################################
#### Set up
#### Key packages
library(magrittr)
#### Load data
dir2load_dat <- "~/Documents/PhD/Academic_PhD_Work/Data and Modelling/Data/Processed Data/Basic Data Processed Outputs/"
skateids <- readRDS(paste0(dir2load_dat, "skateids.rds"))
moorings <- readRDS(paste0(dir2load_dat, "moorings.rds"))
acoustics <- readRDS(paste0(dir2load_dat, "acoustics.rds"))
sentinel <- readRDS(paste0(dir2load_dat, "sentinel_1.rds"))
archival <- readRDS(paste0(dir2load_dat, "archival.rds"))
#####################################
#####################################
#### Add global columns
#### transmitter_id
acoustics$transmitter_id <- as.character(acoustics$transmitter)
skateids$transmitter_id <- acoustics$transmitter_id[match(skateids$reduced_acoustic_id, acoustics$reduced_acoustic_id)]
archival$transmitter_id <- skateids$transmitter_id[match(archival$individual, skateids$individual)]
#####################################
#####################################
#### dat_ids
#### Examine structure
str(skateids)
#### Select columns
cols_skateids <- c("individual",
"date_deployment_tag",
"lat_tag_capture",
"long_tag_capture",
"transmitter_id",
"dst_id")
dat_ids <- skateids[, cols_skateids]
#### Rename and order cols
dat_ids <- dat_ids %>% dplyr::rename(individual_id = individual,
transmitter_id = transmitter_id,
archival_id = dst_id,
tag_start_date = date_deployment_tag,
tag_long = long_tag_capture,
tag_lat = lat_tag_capture)
dat_ids <- dat_ids %>% dplyr::select(individual_id,
transmitter_id,
archival_id,
tag_start_date,
tag_long,
tag_lat)
#### Select rows
# Focus on individuals with acoustic tags
dat_ids <- dat_ids[!is.na(dat_ids$transmitter_id), ]
head(dat_ids)
#####################################
#####################################
#### dat_moorings
#### Examine structure
str(moorings)
#### Select columns
cols_moorings <- c("receiver_number",
"receiver",
"receiver_transmitter_acoustic_id",
"lat_receiver",
"long_receiver",
"date_operation_start_receiver",
"date_operation_end_receiver",
"receiver_depth")
dat_moorings <- moorings[, cols_moorings]
#### Rename columns
dat_moorings <- dat_moorings %>% dplyr::rename(receiver_id = receiver_number,
receiver = receiver,
sentinel_id = receiver_transmitter_acoustic_id,
receiver_start_date = date_operation_start_receiver,
receiver_end_date = date_operation_end_receiver,
receiver_long = long_receiver,
receiver_lat = lat_receiver,
receiver_depth = receiver_depth)
dat_moorings <- dat_moorings %>% dplyr::select(receiver_id,
receiver,
sentinel_id,
receiver_start_date,
receiver_end_date,
receiver_long,
receiver_lat,
receiver_depth)
#### Variable types
dat_moorings$receiver <- as.character(dat_moorings$receiver)
dat_moorings$sentinel_id <- as.numeric(as.character(dat_moorings$sentinel_id))
dat_moorings$sentinel_id[dat_moorings$sentinel_id == 0] <- NA
dat_moorings$sentinel_id  <- as.character(dat_moorings$sentinel_id)
#### Arrange
dat_moorings <- dat_moorings %>% dplyr::arrange(receiver_id)
head(dat_moorings)
#####################################
#####################################
#### dat_acoustics
#### Examine structure
str(acoustics)
acoustics$individual_id <- dat_ids$individual_id[match(acoustics$transmitter_id, dat_ids$transmitter_id)]
#### Select columns
cols_acoustics <- c("date_time",
"receiver",
"receiver_number",
"individual_id",
"transmitter_id",
"lat_receiver",
"long_receiver",
"receiver_depth")
dat_acoustics <- acoustics[, cols_acoustics]
#### Rename and order cols
dat_acoustics <- dat_acoustics %>% dplyr::rename(timestamp = date_time,
receiver_id = receiver_number,
receiver = receiver,
individual_id = individual_id,
transmitter_id = transmitter_id,
receiver_long = long_receiver,
receiver_lat = lat_receiver,
receiver_depth = receiver_depth)
dat_acoustics <- dat_acoustics %>% dplyr::select(timestamp,
individual_id,
transmitter_id,
receiver_id,
receiver,
receiver_long,
receiver_lat,
receiver_depth)
#### Select rows
unique(dat_acoustics$transmitter_id)
# immature females with long acoustic and archival timeseries: 540, 560
# mature females with long timeseries: 555, 543
# immature male: 563
transmitter_ids <- c("A69-1303-540", "A69-1303-560", "A69-1303-555")
dat_acoustics <- dat_acoustics[dat_acoustics$transmitter_id %in% transmitter_ids, ]
#### Arrange
dat_acoustics <- dat_acoustics %>% dplyr::arrange(individual_id, timestamp, receiver_id)
head(dat_acoustics)
#####################################
#####################################
#### dat_sentinel
#### Examine structure
unique(dat_moorings$sentinel_id)
#### Select columns
cols_sentinel <- c("timestamp",
"type",
"detector_id",
"detector",
"transmitter_id",
"transmitter",
"sentinel_id"
)
dat_sentinel <- sentinel[, cols_sentinel]
#### Rename columns
dat_sentinel <- dat_sentinel %>% dplyr::rename(timestamp = timestamp,
type = type,
sink_id = detector_id,
sink = detector,
source_id = transmitter_id,
source = transmitter,
sentinel_id = sentinel_id)
dat_sentinel <- dat_sentinel %>% dplyr::select(timestamp,
type,
sink_id,
sink,
source_id,
source,
sentinel_id)
#### Select rows
# avoid tags: 60599 and 61048 (unexplained gaps and latter was programmed differently)
sentinel_ids <- c(60595, 60596)
dat_sentinel <- dat_sentinel[which(dat_sentinel$sentinel_id %in% sentinel_ids), ]
# Select the first X % of rows for each tag to minimise space requirements
dat_sentinel <- dat_sentinel %>% dplyr::arrange(sentinel_id, timestamp)
dat_sentinel <- lapply(split(dat_sentinel, f = factor(dat_sentinel$sentinel_id)), function(d){
n <- nrow(d)
return(d[1:(n * 0.5), ])
}) %>% dplyr::bind_rows()
dat_sentinel$sentinel_id <- as.character(dat_sentinel$sentinel_id)
#### Arrange rows
dat_sentinel <- dat_sentinel %>% dplyr::arrange(source_id, timestamp, sink_id)
head(dat_sentinel)
tail(dat_sentinel)
#####################################
#####################################
#### dat_archival
#### Examine structure
str(archival)
#### Select columns
cols_archival <- c("date_time",
"individual",
"transmitter_id",
"dst_id",
"depth")
dat_archival <- archival[, cols_archival]
#### Rename and order cols
dat_archival <- dat_archival %>% dplyr::rename(timestamp = date_time,
individual_id = individual,
transmitter_id = transmitter_id,
archival_id = dst_id,
depth = depth)
dat_archival <- dat_archival %>% dplyr::select(timestamp,
individual_id,
transmitter_id,
archival_id,
depth)
#### Select rows
dat_archival <- dat_archival[!is.na(dat_archival$transmitter_id), ]
dat_archival <- dat_archival[dat_archival$transmitter_id %in% transmitter_ids, ]
# dat_archival is the largest file so, to reduce size, I'll select the first X observations
# ... for each individual
nrow(dat_archival)
dat_archival <- dat_archival %>% dplyr::arrange(individual_id, timestamp)
dat_archival <- lapply(split(dat_archival, f = dat_archival$individual_id), function(d) return(d[1:25000, ])) %>% dplyr::bind_rows()
nrow(dat_archival)
#### Arrange rows
dat_archival <- dat_archival %>% dplyr::arrange(individual_id, timestamp)
head(dat_archival)
#####################################
#####################################
#### Final adjustments
#### Filter moorings based on receivers in dat_acoustic and dat_sentinel
receiver_ids <- unique(c(dat_acoustics$receiver_id,
dat_sentinel$source_id,
dat_sentinel$sink_id))
dat_moorings <- dat_moorings[dat_moorings$receiver_id %in% receiver_ids, ]
#### Check structure for naming and variable type consistency
str(dat_ids)
str(dat_moorings)
str(dat_acoustics)
str(dat_sentinel)
str(dat_archival)
#####################################
#####################################
#### Save data sources
dir2save_dat <- "/Users/el72/Documents/PhD/Academic_PhD_Work/Data and Modelling/Scripts/3, Chapters/Geolocation/flapper/flapper/data-raw/"
saveRDS(dat_ids, "dat_ids.rds")
saveRDS(dat_moorings, paste0(dir2save_dat, "dat_moorings.rds"))
saveRDS(dat_acoustics, paste0(dir2save_dat, "dat_acoustics.rds"))
saveRDS(dat_sentinel, paste0(dir2save_dat, "dat_sentinel.rds"))
saveRDS(dat_archival, paste0(dir2save_dat, "dat_archival.rds"))
#### End of code.
#####################################
#####################################
dat_moorings$receiver_id
getwd()
#####################################
#####################################
#### use_dats.R
#### This code:
# 1) Adds example datasets (dats) to flapper R package.
# setwd(paste0(getwd(), "/data-raw/"))
#### Load data
dat_ids       <- readRDS("dat_ids.rds")
dat_moorings  <- readRDS("dat_moorings.rds")
dat_acoustics <- readRDS("dat_acoustics.rds")
dat_sentinel  <- readRDS("dat_sentinel.rds")
dat_archival  <- readRDS("dat_archival.rds")
#### Use data
usethis::use_data(dat_ids, overwrite = TRUE)
usethis::use_data(dat_moorings, overwrite = TRUE)
usethis::use_data(dat_acoustics, overwrite = TRUE)
usethis::use_data(dat_sentinel, overwrite = TRUE)
usethis::use_data(dat_archival, overwrite = TRUE)
library(flapper)
rm(list = ls())
library(flapper)
library(magrittr)
library(lubridate)
sentinel = dat_sentinel
moorings = dat_moorings
breaks = "days"
max_det_dist = 1000
as_POSIXct = function(x, tz = "UTC",...) fasttime::fastPOSIXct(x, tz = tz,...)
dist_btw_receivers = NULL
#### Example (1): Use default options and example dataframes, which contain
# ... all required columns:
sentinel_counts <- assemble_sentinel_counts(sentinel = dat_sentinel,
moorings = dat_moorings)
head(sentinel_counts); tail(sentinel_counts);
#### Example (2): Adjust time window
sentinel_counts <- assemble_sentinel_counts(sentinel = dat_sentinel,
moorings = dat_moorings,
breaks = "days")
head(sentinel_counts); tail(sentinel_counts);
#### Example (2): Adjust maximum detection distance and supply distances_btw_receivers_df
dist_btw_receivers_m <- dist_btw_receivers(dat_moorings[, c("receiver_id", "receiver_long", "receiver_lat")],
f = function(x) return(x*1000))
sentinel_counts <- assemble_sentinel_counts(sentinel = dat_sentinel,
moorings = dat_moorings,
max_det_dist = 1500,
dist_btw_receivers = dist_btw_receivers_m)
head(sentinel_counts); tail(sentinel_counts);
head(sentinel_counts); tail(sentinel_counts)
rm(list = ls())
library(flapper)
library(magrittr)
library(lubridate)
sentinel = dat_sentinel
moorings = dat_moorings
breaks = "days"
max_det_dist = 1000
as_POSIXct = function(x, tz = "UTC",...) fasttime::fastPOSIXct(x, tz = tz,...)
dist_btw_receivers = NULL
#### Example (1): Use default options and example dataframes, which contain
# ... all required columns:
sentinel_counts <- assemble_sentinel_counts(sentinel = dat_sentinel,
moorings = dat_moorings)
head(sentinel_counts); tail(sentinel_counts);
#### Example (2): Adjust time window
sentinel_counts <- assemble_sentinel_counts(sentinel = dat_sentinel,
moorings = dat_moorings,
breaks = "days")
head(sentinel_counts); tail(sentinel_counts);
#### Example (2): Adjust maximum detection distance and supply distances_btw_receivers_df
dist_btw_receivers_m <- dist_btw_receivers(dat_moorings[, c("receiver_id", "receiver_long", "receiver_lat")],
f = function(x) return(x*1000))
sentinel_counts <- assemble_sentinel_counts(sentinel = dat_sentinel,
moorings = dat_moorings,
max_det_dist = 1500,
dist_btw_receivers = dist_btw_receivers_m)
head(sentinel_counts); tail(sentinel_counts)
View(sentinel_counts)
library(flapper)
devtools::spell_check()
library(utils.add)
?check_input
library(flapper)
x = dat_acoustics$timestamp
y = dat_acoustics$individual_id
#### Define a dataframe
acc <- data.frame(x = x, y = y)
#### Sort individuals by total number of days with observations
if(sort){
# Define count
tbl <- table(acc$x, acc$y)
count <- colSums(tbl > 1)
count <- sort(count)
# Reorder factor levels
acc$y <- factor(acc$y, levels = names(count))
skk$y <- factor(skk$y, names(count))
}
length(list())
library(glatos)
?abacus_plot
library(VTrack)
?abacus
??abacus
?round_date
library(Tools4ETS)
library(flapper)
library(flapper)
rm(list = ls())
library(flapper)
library(Tools4ETS)
pretty_ts(dat_archival$timestamp, dat_archival$depth, y2 = NULL, fct = dat_archival$individual_id)
dat_archival<- dat_archival[dat_archival$individual_id == 25, ]
vis_ts(dat_archival)
View(vis_ts)
rm(list = ls())
library(flapper)
library(Tools4ETS)
pretty_ts(dat_archival$timestamp, dat_archival$depth, y2 = NULL, fct = dat_archival$individual_id)
vis_ts(dat_archival)
?dat_acoustics
library(flapper)
acoustics = dat_acoustics
moorings = dat_moorings
#### Receiver identity
# All receivers should have been deployed in the study in question.
runknown <- unique(acoustics$receiver_id)[!(unique(acoustics$receiver_id) %in% moorings$receiver_id)]
lrunknown <- length(runknown)
pos <- which(acoustics$receiverID %in% runknown)
lpos <- length(pos)
warn <- paste0("Check 1 (receiver identity): failed.",
lrunknown, "receiver identities unknown (0.", paste(runknown, collapse = ", "), "), ",
"corresponding to ", lpos, " positions.")
warn
