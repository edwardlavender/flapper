"long_receiver",
"receiver_depth")
dat_acoustics <- acoustics[, cols_acoustics]
#### Rename and order cols
dat_acoustics <- dat_acoustics %>% dplyr::rename(timestamp = date_time,
receiver_id = receiver_number,
receiver = receiver,
individual_id = individual_id,
transmitter_id = transmitter_id,
receiver_long = long_receiver,
receiver_lat = lat_receiver,
receiver_depth = receiver_depth)
dat_acoustics <- dat_acoustics %>% dplyr::select(timestamp,
individual_id,
transmitter_id,
receiver_id,
receiver,
receiver_long,
receiver_lat,
receiver_depth)
#### Select rows
unique(dat_acoustics$transmitter_id)
# immature females with long acoustic and archival timeseries: 540, 560
# mature females with long timeseries: 555, 543
# immature male: 563
transmitter_ids <- c("A69-1303-540", "A69-1303-560", "A69-1303-555")
dat_acoustics <- dat_acoustics[dat_acoustics$transmitter_id %in% transmitter_ids, ]
#### Arrange
dat_acoustics <- dat_acoustics %>% dplyr::arrange(timestamp, receiver_id, transmitter_id)
head(dat_acoustics)
#####################################
#####################################
#### dat_sentinel
#### Examine structure
unique(dat_moorings$sentinel_id)
#### Select columns
cols_sentinel <- c("timestamp",
"type",
"detector_id",
"detector",
"transmitter_id",
"transmitter",
"sentinel_id"
)
dat_sentinel <- sentinel[, cols_sentinel]
#### Rename columns
dat_sentinel <- dat_sentinel %>% dplyr::rename(timestamp = timestamp,
type = type,
sink_id = detector_id,
sink = detector,
source_id = transmitter_id,
source = transmitter,
sentinel_id = sentinel_id)
dat_sentinel <- dat_sentinel %>% dplyr::select(timestamp,
type,
sink_id,
sink,
source_id,
source,
sentinel_id)
#### Select rows
# avoid tags: 60599 and 61048 (unexplained gaps and latter was programmed differently)
sentinel_ids <- c(60595, 60596)
dat_sentinel <- dat_sentinel[dat_sentinel$sentinel_id %in% sentinel_ids, ]
# Select the first X % of rows for each tag to minimise space requirements
dat_sentinel <- dat_sentinel %>% dplyr::arrange(sentinel_id, timestamp)
dat_sentinel <- lapply(split(dat_sentinel, f = dat_sentinel$sentinel_id), function(d){
n <- nrow(d)
return(d[1:(n * 0.5), ])
}) %>% dplyr::bind_rows()
dat_sentinel$sentinel_id <- as.character(dat_sentinel$sentinel_id)
#### Arrange rows
dat_sentinel <- dat_sentinel %>% dplyr::arrange(timestamp, source_id, sink_id)
head(dat_sentinel)
#####################################
#####################################
#### dat_archival
#### Examine structure
str(archival)
#### Select columns
cols_archival <- c("date_time",
"individual",
"transmitter_id",
"dst_id",
"depth")
dat_archival <- archival[, cols_archival]
#### Rename and order cols
dat_archival <- dat_archival %>% dplyr::rename(timestamp = date_time,
individual_id = individual,
transmitter_id = transmitter_id,
archival_id = dst_id,
depth = depth)
dat_archival <- dat_archival %>% dplyr::select(timestamp,
individual_id,
transmitter_id,
archival_id,
depth)
#### Select rows
dat_archival <- dat_archival[!is.na(dat_archival$transmitter_id), ]
dat_archival <- dat_archival[dat_archival$transmitter_id %in% transmitter_ids, ]
# dat_archival is the largest file so, to reduce size, I'll select the first X observations
# ... for each individual
nrow(dat_archival)
dat_archival <- dat_archival %>% dplyr::arrange(individual_id, timestamp)
dat_archival <- lapply(split(dat_archival, f = dat_archival$individual_id), function(d) return(d[1:25000, ])) %>% dplyr::bind_rows()
nrow(dat_archival)
#### Arrange rows
dat_archival <- dat_archival %>% dplyr::arrange(timestamp, individual_id)
head(dat_archival)
#####################################
#####################################
#### Final adjustments
#### Filter dat_ids based on acoustic id:
dat_ids <- dat_ids[dat_ids$transmitter_id %in% transmitter_ids, ]
#### Filter moorings based on receivers in dat_acoustic and dat_sentinel
dat_moorings <- dat_moorings[dat_moorings$receiver_id %in% unique(c(dat_acoustics$receiver_id,
dat_sentinel$detector_id,
dat_sentinel$transmitter_id)), ]
#### Check structure for naming and variable type consistency
str(dat_ids)
str(dat_moorings)
str(dat_acoustics)
str(dat_sentinel)
str(dat_archival)
#####################################
#####################################
#### Save data sources
dir2save_dat <- "/Users/el72/Documents/PhD/Academic_PhD_Work/Data and Modelling/Scripts/3, Chapters/Geolocation/flapper/flapper/data-raw/"
saveRDS(dat_ids, "dat_ids.rds")
saveRDS(dat_moorings, paste0(dir2save_dat, "dat_moorings.rds"))
saveRDS(dat_acoustics, paste0(dir2save_dat, "dat_acoustics.rds"))
saveRDS(dat_sentinel, paste0(dir2save_dat, "dat_sentinel.rds"))
saveRDS(dat_archival, paste0(dir2save_dat, "dat_archival.rds"))
#### End of code.
#####################################
#####################################
str(dat_sentinel)
str(dat_archival)
#####################################
#####################################
#### dats.R
#### This code:
# 1) Adds example datasets (dats) to flapper R package.
setwd(paste0(getwd(), "/data-raw/"))
#### Load data
dat_moorings  <- readRDS("dat_moorings.rds")
dat_acoustics <- readRDS("dat_acoustics.rds")
dat_sentinel  <- readRDS("dat_sentinel.rds")
dat_archival  <- readRDS("dat_archival.rds")
#### Use data
usethis::use_data(dat_moorings, overwrite = TRUE)
usethis::use_data(dat_acoustics, overwrite = TRUE)
usethis::use_data(dat_sentinel, overwrite = TRUE)
usethis::use_data(dat_archival, overwrite = TRUE)
#### Use data
usethis::use_data(dat_ids, overwrite = TRUE)
getwd()
#####################################
#####################################
#### use_dats.R
#### This code:
# 1) Adds example datasets (dats) to flapper R package.
# setwd(paste0(getwd(), "/data-raw/"))
#### Load data
dat_moorings  <- readRDS("dat_moorings.rds")
dat_acoustics <- readRDS("dat_acoustics.rds")
dat_sentinel  <- readRDS("dat_sentinel.rds")
dat_archival  <- readRDS("dat_archival.rds")
#### Use data
usethis::use_data(dat_ids, overwrite = TRUE)
usethis::use_data(dat_moorings, overwrite = TRUE)
usethis::use_data(dat_acoustics, overwrite = TRUE)
usethis::use_data(dat_sentinel, overwrite = TRUE)
usethis::use_data(dat_archival, overwrite = TRUE)
devtools::spell_check()
devtools::spell_check()
?dat_ids
library(flapper)
?dat_ids
str(dat_ids)
?dat_moorings
str(dat_moorings)
?dat_acoustics
str(dat_acoustics)
?dat_archival
str(dat_archival)
?dat_sentinel
str(dat_sentinel)
head(dat_sentinel)
#####################################
#####################################
#### flapper_set_up
#### This code:
# 1) Extracts and save copies of movement data for incorporation in the flapper R package
# Only a subset of movement data are retained to minimise package size.
#####################################
#### Set up
#### Key packages
library(magrittr)
#### Load data
dir2load_dat <- "~/Documents/PhD/Academic_PhD_Work/Data and Modelling/Data/Processed Data/Basic Data Processed Outputs/"
skateids <- readRDS(paste0(dir2load_dat, "skateids.rds"))
moorings <- readRDS(paste0(dir2load_dat, "moorings.rds"))
acoustics <- readRDS(paste0(dir2load_dat, "acoustics.rds"))
sentinel <- readRDS(paste0(dir2load_dat, "sentinel_1.rds"))
archival <- readRDS(paste0(dir2load_dat, "archival.rds"))
#####################################
#####################################
#### Add global columns
#### transmitter_id
acoustics$transmitter_id <- as.character(acoustics$transmitter)
skateids$transmitter_id <- acoustics$transmitter_id[match(skateids$reduced_acoustic_id, acoustics$reduced_acoustic_id)]
archival$transmitter_id <- skateids$transmitter_id[match(archival$individual, skateids$individual)]
#####################################
#####################################
#### dat_ids
#### Examine structure
str(skateids)
#### Select columns
cols_skateids <- c("individual",
"date_deployment_tag",
"lat_tag_capture",
"long_tag_capture",
"transmitter_id",
"dst_id")
dat_ids <- skateids[, cols_skateids]
#### Rename and order cols
dat_ids <- dat_ids %>% dplyr::rename(individual_id = individual,
transmitter_id = transmitter_id,
archival_id = dst_id,
tag_start_date = date_deployment_tag,
tag_long = long_tag_capture,
tag_lat = lat_tag_capture)
dat_ids <- dat_ids %>% dplyr::select(individual_id,
transmitter_id,
archival_id,
tag_start_date,
tag_long,
tag_lat)
#### Select rows
# Focus on individuals with acoustic tags
dat_ids <- dat_ids[!is.na(dat_ids$transmitter_id), ]
head(dat_ids)
#####################################
#####################################
#### dat_moorings
#### Examine structure
str(moorings)
#### Select columns
cols_moorings <- c("receiver_number",
"receiver",
"receiver_transmitter_acoustic_id",
"lat_receiver",
"long_receiver",
"date_operation_start_receiver",
"date_operation_end_receiver",
"receiver_depth")
dat_moorings <- moorings[, cols_moorings]
#### Rename columns
dat_moorings <- dat_moorings %>% dplyr::rename(receiver_id = receiver_number,
receiver = receiver,
sentinel_id = receiver_transmitter_acoustic_id,
receiver_start_date = date_operation_start_receiver,
receiver_end_date = date_operation_end_receiver,
receiver_long = long_receiver,
receiver_lat = lat_receiver,
receiver_depth = receiver_depth)
dat_moorings <- dat_moorings %>% dplyr::select(receiver_id,
receiver,
sentinel_id,
receiver_start_date,
receiver_end_date,
receiver_long,
receiver_lat,
receiver_depth)
#### Variable types
dat_moorings$receiver <- as.character(dat_moorings$receiver)
dat_moorings$sentinel_id <- as.numeric(as.character(dat_moorings$sentinel_id))
dat_moorings$sentinel_id[dat_moorings$sentinel_id == 0] <- NA
dat_moorings$sentinel_id  <- as.character(dat_moorings$sentinel_id)
#### Arrange
dat_moorings <- dat_moorings %>% dplyr::arrange(receiver_id)
head(dat_moorings)
#####################################
#####################################
#### dat_acoustics
#### Examine structure
str(acoustics)
acoustics$individual_id <- dat_ids$individual_id[match(acoustics$transmitter_id, dat_ids$transmitter_id)]
#### Select columns
cols_acoustics <- c("date_time",
"receiver",
"receiver_number",
"individual_id",
"transmitter_id",
"lat_receiver",
"long_receiver",
"receiver_depth")
dat_acoustics <- acoustics[, cols_acoustics]
#### Rename and order cols
dat_acoustics <- dat_acoustics %>% dplyr::rename(timestamp = date_time,
receiver_id = receiver_number,
receiver = receiver,
individual_id = individual_id,
transmitter_id = transmitter_id,
receiver_long = long_receiver,
receiver_lat = lat_receiver,
receiver_depth = receiver_depth)
dat_acoustics <- dat_acoustics %>% dplyr::select(timestamp,
individual_id,
transmitter_id,
receiver_id,
receiver,
receiver_long,
receiver_lat,
receiver_depth)
#### Select rows
unique(dat_acoustics$transmitter_id)
# immature females with long acoustic and archival timeseries: 540, 560
# mature females with long timeseries: 555, 543
# immature male: 563
transmitter_ids <- c("A69-1303-540", "A69-1303-560", "A69-1303-555")
dat_acoustics <- dat_acoustics[dat_acoustics$transmitter_id %in% transmitter_ids, ]
#### Arrange
dat_acoustics <- dat_acoustics %>% dplyr::arrange(individual_id, timestamp, receiver_id)
head(dat_acoustics)
#####################################
#####################################
#### dat_sentinel
#### Examine structure
unique(dat_moorings$sentinel_id)
#### Select columns
cols_sentinel <- c("timestamp",
"type",
"detector_id",
"detector",
"transmitter_id",
"transmitter",
"sentinel_id"
)
dat_sentinel <- sentinel[, cols_sentinel]
#### Rename columns
dat_sentinel <- dat_sentinel %>% dplyr::rename(timestamp = timestamp,
type = type,
sink_id = detector_id,
sink = detector,
source_id = transmitter_id,
source = transmitter,
sentinel_id = sentinel_id)
dat_sentinel <- dat_sentinel %>% dplyr::select(timestamp,
type,
sink_id,
sink,
source_id,
source,
sentinel_id)
#### Select rows
# avoid tags: 60599 and 61048 (unexplained gaps and latter was programmed differently)
sentinel_ids <- c(60595, 60596)
dat_sentinel <- dat_sentinel[dat_sentinel$sentinel_id %in% sentinel_ids, ]
# Select the first X % of rows for each tag to minimise space requirements
dat_sentinel <- dat_sentinel %>% dplyr::arrange(sentinel_id, timestamp)
dat_sentinel <- lapply(split(dat_sentinel, f = dat_sentinel$sentinel_id), function(d){
n <- nrow(d)
return(d[1:(n * 0.5), ])
}) %>% dplyr::bind_rows()
dat_sentinel$sentinel_id <- as.character(dat_sentinel$sentinel_id)
#### Arrange rows
dat_sentinel <- dat_sentinel %>% dplyr::arrange(source_id, timestamp, sink_id)
head(dat_sentinel)
#####################################
#####################################
#### dat_archival
#### Examine structure
str(archival)
#### Select columns
cols_archival <- c("date_time",
"individual",
"transmitter_id",
"dst_id",
"depth")
dat_archival <- archival[, cols_archival]
#### Rename and order cols
dat_archival <- dat_archival %>% dplyr::rename(timestamp = date_time,
individual_id = individual,
transmitter_id = transmitter_id,
archival_id = dst_id,
depth = depth)
dat_archival <- dat_archival %>% dplyr::select(timestamp,
individual_id,
transmitter_id,
archival_id,
depth)
#### Select rows
dat_archival <- dat_archival[!is.na(dat_archival$transmitter_id), ]
dat_archival <- dat_archival[dat_archival$transmitter_id %in% transmitter_ids, ]
# dat_archival is the largest file so, to reduce size, I'll select the first X observations
# ... for each individual
nrow(dat_archival)
dat_archival <- dat_archival %>% dplyr::arrange(individual_id, timestamp)
dat_archival <- lapply(split(dat_archival, f = dat_archival$individual_id), function(d) return(d[1:25000, ])) %>% dplyr::bind_rows()
nrow(dat_archival)
#### Arrange rows
dat_archival <- dat_archival %>% dplyr::arrange(individual_id, timestamp)
head(dat_archival)
#####################################
#####################################
#### Final adjustments
#### Filter dat_ids based on acoustic id:
dat_ids <- dat_ids[dat_ids$transmitter_id %in% transmitter_ids, ]
#### Filter moorings based on receivers in dat_acoustic and dat_sentinel
dat_moorings <- dat_moorings[dat_moorings$receiver_id %in% unique(c(dat_acoustics$receiver_id,
dat_sentinel$detector_id,
dat_sentinel$transmitter_id)), ]
#### Check structure for naming and variable type consistency
str(dat_ids)
str(dat_moorings)
str(dat_acoustics)
str(dat_sentinel)
str(dat_archival)
#####################################
#####################################
#### Save data sources
dir2save_dat <- "/Users/el72/Documents/PhD/Academic_PhD_Work/Data and Modelling/Scripts/3, Chapters/Geolocation/flapper/flapper/data-raw/"
saveRDS(dat_ids, "dat_ids.rds")
saveRDS(dat_moorings, paste0(dir2save_dat, "dat_moorings.rds"))
saveRDS(dat_acoustics, paste0(dir2save_dat, "dat_acoustics.rds"))
saveRDS(dat_sentinel, paste0(dir2save_dat, "dat_sentinel.rds"))
saveRDS(dat_archival, paste0(dir2save_dat, "dat_archival.rds"))
#### End of code.
#####################################
#####################################
#####################################
#####################################
#### use_dats.R
#### This code:
# 1) Adds example datasets (dats) to flapper R package.
# setwd(paste0(getwd(), "/data-raw/"))
#### Load data
dat_moorings  <- readRDS("dat_moorings.rds")
dat_acoustics <- readRDS("dat_acoustics.rds")
dat_sentinel  <- readRDS("dat_sentinel.rds")
dat_archival  <- readRDS("dat_archival.rds")
#### Use data
usethis::use_data(dat_ids, overwrite = TRUE)
usethis::use_data(dat_moorings, overwrite = TRUE)
usethis::use_data(dat_acoustics, overwrite = TRUE)
usethis::use_data(dat_sentinel, overwrite = TRUE)
usethis::use_data(dat_archival, overwrite = TRUE)
getwd()
setwd(paste0(getwd(), "/data-raw/"))
#### Load data
dat_ids       <- readRDS("dat_ids.rds")
dat_moorings  <- readRDS("dat_moorings.rds")
dat_acoustics <- readRDS("dat_acoustics.rds")
dat_sentinel  <- readRDS("dat_sentinel.rds")
dat_archival  <- readRDS("dat_archival.rds")
#### Use data
usethis::use_data(dat_ids, overwrite = TRUE)
usethis::use_data(dat_moorings, overwrite = TRUE)
usethis::use_data(dat_acoustics, overwrite = TRUE)
usethis::use_data(dat_sentinel, overwrite = TRUE)
usethis::use_data(dat_archival, overwrite = TRUE)
devtools::build_manual()
#### Examples
library(flapper)
?dist_btw_receivers
View(dist_btw_receivers)
dist_btw_receivers(data.frame(receiver_id = dat_moorings$receiver_id,
receiver_lat = dat_moorings$receiver_lat
receiver_long = dat_moorings$receiver_long))
dist_btw_receivers(data.frame(receiver_id = dat_moorings$receiver_id,
receiver_lat = dat_moorings$receiver_lat,
receiver_long = dat_moorings$receiver_long)
)
rm(list = ls())
#### Examples
library(flapper)
dist_btw_receivers(data.frame(receiver_id = dat_moorings$receiver_id,
receiver_lat = dat_moorings$receiver_lat,
receiver_long = dat_moorings$receiver_long)
)
dist_btw_receivers <-
dist_btw_receivers(data.frame(receiver_id = dat_moorings$receiver_id,
receiver_lat = dat_moorings$receiver_lat,
receiver_long = dat_moorings$receiver_long)
)
#### Example (2): Post-process distances via the f argument
dist_btw_receivers <- dist_btw_receivers(dat, f = round)
#### Example (1): Compute distances between all combinations of receivers in km
# Define dataframe with required columns
dat <- data.frame(receiver_id = dat_moorings$receiver_id,
receiver_lat = dat_moorings$receiver_lat,
receiver_long = dat_moorings$receiver_long)
# Compute distances
dist_btw_receivers <- dist_btw_receivers(dat)
#### Example (2): Post-process distances via the f argument
dist_btw_receivers <- dist_btw_receivers(dat, f = round)
head(dist_btw_receivers)
head(dist_btw_receivers)
# Compute distances
dist_btw_receivers_km <- dist_btw_receivers(dat)
head(dist_btw_receivers_km)
#### Example (2): Post-process distances via the f argument
dist_btw_receivers_km_round <- dist_btw_receivers(dat, f = round)
dist_btw_receivers_m <- dist_btw_receivers(dat, f = function(x) x/1000)
head(dist_btw_receivers_m)
head(dist_btw_receivers_km_round)
dist_btw_receivers_m <- dist_btw_receivers(dat, f = function(x) x*1000)
head(dist_btw_receivers_m)
library(flapper)
devtools::build_manual()
