% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf_support.R
\name{pf_plot_map}
\alias{pf_plot_map}
\title{Plot `probability of use' from a PF algorithm}
\usage{
pf_plot_map(
  archive,
  map,
  scale = c("original", "max", "sum"),
  add_rasters = list(),
  ...
)
}
\arguments{
\item{archive}{A \code{\link[flapper]{pf_archive-class}} object (from \code{\link[flapper]{pf}}).}

\item{map}{A \code{\link[raster]{raster}} that defines a grid across the area of interest.}

\item{scale}{A character that defines how \code{\link[raster]{raster}} values are scaled: \code{"original"} uses the original values; \code{"max"} scales values by the maximum value so that they lie between zero and one; and \code{"sum"} scales values by their sum so that they sum to one.}

\item{add_rasters}{A named list, passed to \code{\link[prettyGraphics]{pretty_map}}, to customise the appearance of the plotted surface.}

\item{...}{Additional arguments passed to \code{\link[prettyGraphics]{pretty_map}}.}
}
\value{
The function invisibly returns a \code{\link[raster]{raster}}, in which each cell contains the `probability of use' score and produces a plot of this surface.
}
\description{
This function creates a plot of the `probability of use' across an area based on particles sampled by a particle filtering (PF) algorithm. To implement the function, a \code{\link[flapper]{pf_archive-class}} object that contains particles (locations) sampled by \code{\link[flapper]{pf}} must be supplied. The function extracts all sampled locations and, for each location, calculates `the probability of use' for that location over the time series. This is returned (invisibly) as a \code{\link[raster]{raster}} and plotted.
}
\details{
For each location, the 'probability of use' is calculated as the sum of the number of times that the location was sampled, weighted by the associated probabilities of each sample.
}
\examples{
#### Example (1): Implement the function with default options
# using the example 'dat_dcpf_histories' data
pf_plot_map(dat_dcpf_histories, map = dat_dc$args$bathy)

#### Example (2): Re-scale the map
pf_plot_map(dat_dcpf_histories, map = dat_dc$args$bathy, scale = "max")
pf_plot_map(dat_dcpf_histories, map = dat_dc$args$bathy, scale = "sum")

#### Example (3): Customise the map
pf_plot_map(dat_dcpf_histories, map = dat_dc$args$bathy,
            add_rasters = list(col = grDevices::grey.colors(n = 100)),
            xlab = "x", ylab = "y")

}
\seealso{
\code{\link[flapper]{pf}} implements PF. \code{\link[flapper]{pf_simplify}} assembles paths from particle histories. \code{\link[flapper]{pf_plot_history}} visualises particle histories. \code{\link[flapper]{pf_plot_1d}}, \code{\link[flapper]{pf_plot_2d}} and \code{\link[flapper]{pf_plot_3d}} provide plotting routines for paths. \code{\link[flapper]{pf_loglik}} calculates the log-likelihood of each path.
}
\author{
Edward Lavender
}
