% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/acdc.R
\name{setup_acdc}
\alias{setup_acdc}
\title{Setup the ACDC algorithm}
\usage{
setup_acdc(
  rs,
  xy,
  detection_range,
  mobility,
  n_timesteps = 250,
  coastline = NULL,
  boundaries = NULL,
  plot = FALSE,
  cl = NULL,
  verbose = TRUE
)
}
\arguments{
\item{rs}{A integer vector of receiver IDs.}

\item{xy}{A \code{\link[sp]{SpatialPoints}} object that defines the locations of each receiver. The order of points in this object should match the order of receivers defined in \code{rs}. The coordinate reference system should be the Universal Transverse Mercator system with distances in metres (to match \code{detection_range}, see below).}

\item{detection_range}{A number that defines the maximum detection range at which an individual could be detected from a receiver.}

\item{mobility}{A number that defines the distance that an individual could move in the time period between archival observations.}

\item{n_timesteps}{An integer that defines the the number of timesteps after a hypothetical detection for which centroids will be created, where the duration of each timestep is given by the duration between archival observations.}

\item{coastline}{(optional) A \code{\link[sp]{SpatialPolygonsDataFrame-class}} object that defines the coastline in an area. If provided, acoustic centroids are processed to remove any areas on land. Algorithm speed declines with the complexity of the coastline.}

\item{boundaries}{(optional) A \code{\link[raster]{extent}} object that defines the boundaries of an area within which individuals are assumed to have remained. If provided, acoustic centroids are processed to remain within this area.}

\item{plot}{A logical input that defines whether or not to produce a plot of the area, including receivers, the coastline and the area boundaries (if provided), and acoustic centroids. This is useful for checking purposes but it can reduce algorithm speed.}

\item{cl}{(optional) A cluster object created by \code{\link[parallel]{makeCluster}} to implement the algorithm in parallel. The connection to the cluster is closed within the function.}

\item{verbose}{A logical input that defines whether or not to print messages to the console to relay function progress.}
}
\value{
The function returns a list of \code{\link[sp]{SpatialPolygonsDataFrame-class}} objects, with one element for all numbers from 1 to the maximum receiver number (\code{rx}). Any list elements that do not correspond to receivers contain a \code{NULL} element. List elements that correspond to receivers contain a \code{\link[sp]{SpatialPolygonsDataFrame-class}} object containing all the centroids for that receiver.
}
\description{
This function produces the acoustic contours required by the acoustic-centroid depth-contour (ACDC) algorithm.
}
\examples{
#### Define data for setup_acdc()
## Define coordinates of receivers as SpatialPoints with UTM CRS
# CRS of receiver locations as recorded in dat_moorings
proj_wgs84 <- sp::CRS("+init=epsg:4326")
# CRS of receiver locations required
proj_utm <- sp::CRS(paste("+proj=utm +zone=29 +datum=WGS84",
                          "+units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# Define SpatialPoints object
xy_wgs84 <- sp::SpatialPoints(dat_moorings[, c("receiver_long", "receiver_lat")], proj_wgs84)
xy_utm <- sp::spTransform(xy_wgs84, proj_utm)

#### Example (1): Define a list of centroids with specified parameters
# ... (Argument values are small to reduce computation time for examples)
centroids <- setup_acdc(rs = dat_moorings$receiver_id,
                        xy = xy_utm,
                        detection_range = 500,
                        mobility = 250,
                        n_timesteps = 3
                        )
# A list of SpatialPolygonsDataFrames is returned with elements from 1:max(rs)
# NULL elements correspond to numbers in this sequence that do not refer to receivers
# Otherwise a SpatialPolygonsDataFrame is returned with all the centroids for that receiver
centroids

#### Example (2): Visualise the acoustic centroids produced via plot = TRUE
centroids <- setup_acdc(rs = dat_moorings$receiver_id,
                        xy = xy_utm,
                        detection_range = 500,
                        mobility = 250,
                        n_timesteps = 3,
                        plot = TRUE
                        )

#### Example (3): Remove areas of the centroids that overlap with coastline
centroids <- setup_acdc(rs = dat_moorings$receiver_id,
                        xy = xy_utm,
                        detection_range = 500,
                        mobility = 250,
                        n_timesteps = 3,
                        plot = TRUE,
                        coastline = dat_coast
                        )

#### Example (4): Remove areas of the centroids beyond a boundary
xy_utm_coords <- sp::coordinates(xy_utm)
boundaries <- raster::extent(min(xy_utm_coords[, 1]),
                             max(xy_utm_coords[, 1]),
                             min(xy_utm_coords[, 2]),
                             max(xy_utm_coords[, 2])
                        )
centroids <- setup_acdc(rs = dat_moorings$receiver_id,
                        xy = xy_utm,
                        detection_range = 500,
                        mobility = 250,
                        n_timesteps = 3,
                        plot = TRUE,
                        coastline = dat_coast,
                        boundaries = boundaries
                        )

#### Example (5): Implement the algorithm in parallel
centroids <- setup_acdc(rs = dat_moorings$receiver_id,
                        xy = xy_utm,
                        detection_range = 500,
                        mobility = 250,
                        n_timesteps = 3,
                        plot = TRUE,
                        coastline = dat_coast,
                        boundaries = boundaries,
                        cl = parallel::makeCluster(2L)
                        )

#### Example (6): Acoustic centroids can be saved to file using rlist::list.save()
# rlist::list.save(centroids, paste0(tempdir(), "/centroids.RData"))
}
\author{
Edward Lavender
}
